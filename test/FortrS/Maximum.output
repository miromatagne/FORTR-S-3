@.strR = private unnamed_addr constant [3 x i8] c"%d\00", align 1
define i32 @readInt() #0 {
 %1 = alloca i32, align 4
 %2 = call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.strR, i32 0, i32 0), i32* %1)
 %3 = load i32, i32* %1, align 4
 ret i32 %3}
declare i32 @scanf(i8*, ...) #1
@.strP = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1

define void @println(i32 %x) {
 %1 = alloca i32, align 4
 store i32 %x, i32* %1, align 4
 %2 = load i32, i32* %1, align 4
 %3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.strP, i32 0, i32 0), i32 %2)
 ret void
}
declare i32 @printf(i8*, ...) #1
define i32 @main() {
  entry:
        %0 = call i32 @readInt()
        %nbnumbers = alloca i32
        store i32 %0, i32* %nbnumbers
        %i = alloca i32
        %1 = alloca i32
        store i32 0, i32* %1
        %2 = load i32, i32* %1
        store i32 %2, i32* %i
        %max = alloca i32
        %3 = alloca i32
        store i32 0, i32* %3
        %4 = load i32, i32* %3
        store i32 %4, i32* %max
        %error = alloca i32
        %5 = alloca i32
        store i32 -1, i32* %5
        %6 = load i32, i32* %5
        store i32 %6, i32* %error
        %7 = load i32, i32* %nbnumbers
        %8 = alloca i32
        store i32 0, i32* %8
        %9 = load i32, i32* %8
        %10 = icmp sgt i32 %7, %9
        br i1 %10, label %true1, label %else1
  true1:
        br label %while1
  while1:
        %11 = load i32, i32* %nbnumbers
        %12 = load i32, i32* %i
        %13 = icmp sgt i32 %11, %12
        br i1 %13, label %wtrue1, label %wexit1
  wtrue1:
        %14 = call i32 @readInt()
        %number = alloca i32
        store i32 %14, i32* %number
        %15 = load i32, i32* %number
        %16 = load i32, i32* %max
        %17 = icmp sgt i32 %15, %16
        br i1 %17, label %true2, label %exit2
  true2:
        %18 = load i32, i32* %number
        store i32 %18, i32* %max
        br label %exit2
  exit2:
        %19 = load i32, i32* %i
        %20 = alloca i32
        store i32 1, i32* %20
        %21 = load i32, i32* %20
        %22 = add i32 %19, %21
        store i32 %22, i32* %i
        br label %while1
  wexit1:
        %23 = load i32, i32* %max
        call void @println(i32 %23)
        br label %exit
  else1:
        %24 = load i32, i32* %error
        call void @println(i32 %24)
        br label %exit
  exit:
        ret i32 0
}