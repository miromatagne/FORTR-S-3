@.strR = private unnamed_addr constant [3 x i8] c"%d\00", align 1
define i32 @readInt() #0 {
 %1 = alloca i32, align 4
 %2 = call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.strR, i32 0, i32 0), i32* %1)
 %3 = load i32, i32* %1, align 4
 ret i32 %3}
declare i32 @scanf(i8*, ...) #1
@.strP = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1

define void @println(i32 %x) {
 %1 = alloca i32, align 4
 store i32 %x, i32* %1, align 4
 %2 = load i32, i32* %1, align 4
 %3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.strP, i32 0, i32 0), i32 %2)
 ret void
}
declare i32 @printf(i8*, ...) #1
define i32 @main() {
  entry:
        %0 = call i32 @readInt()
        %a = alloca i32
        store i32 %0, i32* %a
        %1 = load i32, i32* %a
        %2 = alloca i32
        store i32 -2, i32* %2
        %3 = load i32, i32* %2
        %4 = alloca i32
        store i32 3, i32* %4
        %5 = load i32, i32* %4
        %6 = alloca i32
        store i32 6, i32* %6
        %7 = load i32, i32* %6
        %8 = alloca i32
        store i32 1, i32* %8
        %9 = load i32, i32* %8
        %10 = add i32 %7, %9
        %11 = alloca i32
        store i32 3, i32* %11
        %12 = load i32, i32* %11
        %13 = add i32 %10, %12
        %14 = alloca i32
        store i32 7, i32* %14
        %15 = load i32, i32* %14
        %16 = add i32 %13, %15
        %17 = mul i32 %5, %16
        %18 = alloca i32
        store i32 5, i32* %18
        %19 = load i32, i32* %18
        %20 = sdiv i32 %17, %19
        %21 = alloca i32
        store i32 4, i32* %21
        %22 = load i32, i32* %21
        %23 = mul i32 %20, %22
        %24 = add i32 %3, %23
        %25 = add i32 %1, %24
        store i32 %25, i32* %a
        %26 = load i32, i32* %a
        call void @println(i32 %26)
        ret i32 0
}