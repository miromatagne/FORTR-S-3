@.strR = private unnamed_addr constant [3 x i8] c"%d\00", align 1
define i32 @readInt() #0 {
 %1 = alloca i32, align 4
 %2 = call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.strR, i32 0, i32 0), i32* %1)
 %3 = load i32, i32* %1, align 4
 ret i32 %3}
declare i32 @scanf(i8*, ...) #1
@.strP = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1

define void @println(i32 %x) {
 %1 = alloca i32, align 4
 store i32 %x, i32* %1, align 4
 %2 = load i32, i32* %1, align 4
 %3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.strP, i32 0, i32 0), i32 %2)
 ret void
}
declare i32 @printf(i8*, ...) #1
define i32 @main() {
  entry:
        %a = alloca i32
        %0 = alloca i32
        store i32 10, i32* %0
        %1 = load i32, i32* %0
        store i32 %1, i32* %a
        br label %while1
  while1:
        %2 = load i32, i32* %a
        %3 = alloca i32
        store i32 0, i32* %3
        %4 = load i32, i32* %3
        %5 = icmp sgt i32 %2, %4
        br i1 %5, label %wtrue1, label %wexit1
  wtrue1:
        %6 = load i32, i32* %a
        %7 = alloca i32
        store i32 1, i32* %7
        %8 = load i32, i32* %7
        %9 = sub i32 %6, %8
        store i32 %9, i32* %a
        %10 = load i32, i32* %a
        %11 = alloca i32
        store i32 6, i32* %11
        %12 = load i32, i32* %11
        %13 = icmp sgt i32 %10, %12
        br i1 %13, label %true1, label %exit1
  true1:
        %14 = load i32, i32* %a
        %15 = alloca i32
        store i32 2, i32* %15
        %16 = load i32, i32* %15
        %17 = sub i32 %14, %16
        store i32 %17, i32* %a
        br label %exit1
  exit1:
        br label %while1
  wexit1:
        %18 = load i32, i32* %a
        call void @println(i32 %18)
        ret i32 0
}